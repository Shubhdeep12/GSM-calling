
gsm_1_dial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000172  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000172  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000042  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003dc  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001a2  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002f5  00000000  00000000  000007de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000bc  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000188  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  8a:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <usstrsend>:
}

}

void usstrsend(char *str)
{
  92:	fc 01       	movw	r30, r24
  94:	04 c0       	rjmp	.+8      	; 0x9e <usstrsend+0xc>
 UCSRB=0x18;
 UCSRC=0x8e;
}
  void send(char send)
  {
    while((UCSRA & 0x20)==0);
  96:	5d 9b       	sbis	0x0b, 5	; 11
  98:	fe cf       	rjmp	.-4      	; 0x96 <usstrsend+0x4>
	UDR=send;
  9a:	8c b9       	out	0x0c, r24	; 12
  9c:	31 96       	adiw	r30, 0x01	; 1
}

void usstrsend(char *str)
{
int i=0;
while(str[i]!='\0')
  9e:	80 81       	ld	r24, Z
  a0:	88 23       	and	r24, r24
  a2:	c9 f7       	brne	.-14     	; 0x96 <usstrsend+0x4>
{
send(str[i]);
i++;
}
}
  a4:	08 95       	ret

000000a6 <main>:
void ini();
char rec(void);


void main()
{
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
}
}

void ini()
{
  UBRRL=51;
  ac:	83 e3       	ldi	r24, 0x33	; 51
  ae:	89 b9       	out	0x09, r24	; 9
 UBRRH=0;
  b0:	10 bc       	out	0x20, r1	; 32
 UCSRB=0x18;
  b2:	88 e1       	ldi	r24, 0x18	; 24
  b4:	8a b9       	out	0x0a, r24	; 10
 UCSRC=0x8e;
  b6:	8e e8       	ldi	r24, 0x8E	; 142
  b8:	80 bd       	out	0x20, r24	; 32
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ba:	c9 e1       	ldi	r28, 0x19	; 25
  bc:	d0 e0       	ldi	r29, 0x00	; 0
}
  void send(char send)
  {
    while((UCSRA & 0x20)==0);
	UDR=send;
  be:	1d e0       	ldi	r17, 0x0D	; 13
void main()
{
ini();
while(1)
{
usstrsend("AT");
  c0:	80 e6       	ldi	r24, 0x60	; 96
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 49 00 	call	0x92	; 0x92 <usstrsend>
  c8:	80 e1       	ldi	r24, 0x10	; 16
  ca:	97 e2       	ldi	r25, 0x27	; 39
  cc:	fe 01       	movw	r30, r28
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x28>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d4:	d9 f7       	brne	.-10     	; 0xcc <main+0x26>
 UCSRB=0x18;
 UCSRC=0x8e;
}
  void send(char send)
  {
    while((UCSRA & 0x20)==0);
  d6:	5d 9b       	sbis	0x0b, 5	; 11
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <main+0x30>
	UDR=send;
  da:	1c b9       	out	0x0c, r17	; 12
  dc:	80 e1       	ldi	r24, 0x10	; 16
  de:	97 e2       	ldi	r25, 0x27	; 39
  e0:	fe 01       	movw	r30, r28
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <main+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e8:	d9 f7       	brne	.-10     	; 0xe0 <main+0x3a>
{
usstrsend("AT");
_delay_ms(1000);
send(0x0d);
_delay_ms(1000);
usstrsend("ATD 8619335601;");
  ea:	83 e6       	ldi	r24, 0x63	; 99
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 49 00 	call	0x92	; 0x92 <usstrsend>
  f2:	80 e1       	ldi	r24, 0x10	; 16
  f4:	97 e2       	ldi	r25, 0x27	; 39
  f6:	fe 01       	movw	r30, r28
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x52>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fe:	d9 f7       	brne	.-10     	; 0xf6 <main+0x50>
 UCSRB=0x18;
 UCSRC=0x8e;
}
  void send(char send)
  {
    while((UCSRA & 0x20)==0);
 100:	5d 9b       	sbis	0x0b, 5	; 11
 102:	fe cf       	rjmp	.-4      	; 0x100 <main+0x5a>
	UDR=send;
 104:	1c b9       	out	0x0c, r17	; 12
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	9f ef       	ldi	r25, 0xFF	; 255
 10a:	fe 01       	movw	r30, r28
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 110:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 112:	d9 f7       	brne	.-10     	; 0x10a <main+0x64>
_delay_ms(1000);
usstrsend("ATD 8619335601;");
_delay_ms(1000);
send(0x0d);
_delay_ms(500000);
usstrsend("ATH");
 114:	83 e7       	ldi	r24, 0x73	; 115
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 49 00 	call	0x92	; 0x92 <usstrsend>
 11c:	80 e1       	ldi	r24, 0x10	; 16
 11e:	97 e2       	ldi	r25, 0x27	; 39
 120:	fe 01       	movw	r30, r28
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0x7c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 126:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 128:	d9 f7       	brne	.-10     	; 0x120 <main+0x7a>
 UCSRB=0x18;
 UCSRC=0x8e;
}
  void send(char send)
  {
    while((UCSRA & 0x20)==0);
 12a:	5d 9b       	sbis	0x0b, 5	; 11
 12c:	fe cf       	rjmp	.-4      	; 0x12a <main+0x84>
	UDR=send;
 12e:	1c b9       	out	0x0c, r17	; 12
 130:	80 e1       	ldi	r24, 0x10	; 16
 132:	97 e2       	ldi	r25, 0x27	; 39
 134:	fe 01       	movw	r30, r28
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <main+0x90>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 13a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 13c:	d9 f7       	brne	.-10     	; 0x134 <main+0x8e>
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	9f ef       	ldi	r25, 0xFF	; 255
 142:	fe 01       	movw	r30, r28
 144:	31 97       	sbiw	r30, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <main+0x9e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 148:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 14a:	d9 f7       	brne	.-10     	; 0x142 <main+0x9c>
 14c:	b9 cf       	rjmp	.-142    	; 0xc0 <main+0x1a>

0000014e <ini>:
i++;
}
}

void ini()
{
 14e:	83 e3       	ldi	r24, 0x33	; 51
 150:	89 b9       	out	0x09, r24	; 9
  UBRRL=51;
 UBRRH=0;
 152:	10 bc       	out	0x20, r1	; 32
 UCSRB=0x18;
 154:	88 e1       	ldi	r24, 0x18	; 24
 156:	8a b9       	out	0x0a, r24	; 10
 UCSRC=0x8e;
 158:	8e e8       	ldi	r24, 0x8E	; 142
 15a:	80 bd       	out	0x20, r24	; 32
}
 15c:	08 95       	ret

0000015e <send>:
  void send(char send)
  {
 15e:	5d 9b       	sbis	0x0b, 5	; 11
 160:	fe cf       	rjmp	.-4      	; 0x15e <send>
    while((UCSRA & 0x20)==0);
	UDR=send;
 162:	8c b9       	out	0x0c, r24	; 12
	}
 164:	08 95       	ret

00000166 <rec>:

	char rec(void)
	{
 166:	5f 9b       	sbis	0x0b, 7	; 11
 168:	fe cf       	rjmp	.-4      	; 0x166 <rec>
	 while ((UCSRA & 0x80)==0);
	 return UDR;
 16a:	8c b1       	in	r24, 0x0c	; 12
	 }
 16c:	08 95       	ret

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
